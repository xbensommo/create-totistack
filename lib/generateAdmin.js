import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk'; // Assuming chalk is used for console logging

/**
 * Generates the AdminLayout component and placeholder admin views (Dashboard, Users).
 * The layout includes a responsive top bar, desktop sidebar, and mobile sidebar
 * with slide-in/out functionality, inspired by a clean, modern aesthetic.
 *
 * @param {object} answers - An object containing user preferences, specifically to get the appStore name.
 */
export default async function generateAdmin(answers) {
  const { appStore = 'appStore' } = answers;
  const authStorePath = `@/stores/${appStore}`; // Dynamic path to the auth store

  const layoutsDir = 'src/layouts';
  await fs.ensureDir(layoutsDir);
  console.log(chalk.blue('Generating Admin panel...'));

  const adminLayoutContent = `<!--
* @title AdminLayout
* @description Responsive layout for the admin dashboard, featuring a top bar,
* desktop sidebar, and a slide-in full-screen mobile sidebar.
* @author Generated by create-totistack
* @created ${new Date().toISOString()}
-->
<script setup>
import { ref, watch } from 'vue';
import { useAppStore } from '${authStorePath}';
import { useRoute } from 'vue-router';

const authStore = useAppStore();
const route = useRoute();

// State for sidebar visibility
const isDesktopSidebarOpen = ref(true); // Desktop sidebar starts open
const isMobileSidebarOpen = ref(false); // Mobile sidebar starts closed

// Close mobile sidebar when route changes
watch(route, () => {
  isMobileSidebarOpen.value = false;
});

// Helper for active link styling
const isActiveLink = (path) => route.path.startsWith(path);

// Define navigation links for the sidebar
const navLinks = [
  { name: 'Dashboard', path: '/admin/dashboard', icon: 'i-mdi-view-dashboard-outline' },
  { name: 'Users', path: '/admin/users', icon: 'i-mdi-account-group-outline' },
  // Add more admin links here as needed
  // { name: 'Products', path: '/admin/products', icon: 'i-mdi-package-variant-closed' },
  // { name: 'Orders', path: '/admin/orders', icon: 'i-mdi-cart-outline' },
];

</script>

<template>
  <div class="min-h-screen flex flex-col lg:flex-row bg-gray-50 font-inter antialiased">

    <!-- Mobile Sidebar Overlay -->
    <div
      v-if="isMobileSidebarOpen"
      @click="isMobileSidebarOpen = false"
      class="fixed inset-0 bg-gray-900 bg-opacity-75 z-40 lg:hidden transition-opacity duration-300"
    ></div>

    <!-- Mobile Sidebar (Full-screen, slides from left) -->
    <aside
      :class="{ 'translate-x-0': isMobileSidebarOpen, '-translate-x-full': !isMobileSidebarOpen }"
      class="fixed inset-y-0 left-0 w-full bg-white z-50 transform transition-transform duration-300 ease-in-out
             flex flex-col lg:hidden shadow-lg rounded-r-lg"
    >
      <div class="flex items-center justify-between p-6 border-b border-gray-200">
        <h2 class="text-2xl font-bold text-gray-900">Admin Panel</h2>
        <button @click="isMobileSidebarOpen = false" class="text-gray-500 hover:text-gray-700 focus:outline-none">
          <span class="i-mdi-close text-2xl"></span>
        </button>
      </div>
      <nav class="flex-grow p-4 space-y-2">
        <router-link
          v-for="link in navLinks"
          :key="link.name"
          :to="link.path"
          @click="isMobileSidebarOpen = false"
          :class="[
            'flex items-center px-4 py-3 rounded-lg transition duration-200',
            isActiveLink(link.path)
              ? 'bg-primary text-white shadow-md'
              : 'text-gray-700 hover:bg-gray-100 hover:text-primary'
          ]"
        >
          <span :class="[link.icon, 'text-xl mr-3']"></span>
          <span class="font-medium">{{ link.name }}</span>
        </router-link>
      </nav>
      <div class="p-4 border-t border-gray-200">
        <button
          @click="authStore.logout"
          class="w-full flex items-center justify-center px-4 py-3 bg-gray-100 text-gray-700 rounded-lg
                 hover:bg-gray-200 transition duration-200 font-medium"
        >
          <span class="i-mdi-logout text-xl mr-3"></span>
          Logout
        </button>
      </div>
    </aside>

    <!-- Desktop Sidebar (Fixed, slides from left) -->
    <aside
      :class="{ 'w-64 translate-x-0': isDesktopSidebarOpen, 'w-0 -translate-x-full': !isDesktopSidebarOpen }"
      class="hidden lg:flex flex-col flex-shrink-0 bg-gray-900 text-white shadow-xl
             transform transition-all duration-300 ease-in-out rounded-r-xl overflow-hidden"
    >
      <div class="flex items-center justify-between p-6 border-b border-gray-700">
        <h2 v-if="isDesktopSidebarOpen" class="text-2xl font-bold text-white">Admin Panel</h2>
        <!-- Optional: Add a subtle logo or icon here -->
      </div>
      <nav class="flex-grow p-4 space-y-2 overflow-y-auto">
        <router-link
          v-for="link in navLinks"
          :key="link.name"
          :to="link.path"
          :class="[
            'flex items-center px-4 py-3 rounded-lg transition duration-200',
            isActiveLink(link.path)
              ? 'bg-primary text-white shadow-md'
              : 'text-gray-300 hover:bg-gray-700 hover:text-white'
          ]"
        >
          <span :class="[link.icon, 'text-xl mr-3']"></span>
          <span v-if="isDesktopSidebarOpen" class="font-medium">{{ link.name }}</span>
        </router-link>
      </nav>
      <div class="p-4 border-t border-gray-700">
        <button
          @click="authStore.logout"
          class="w-full flex items-center justify-center px-4 py-3 bg-gray-800 text-gray-300 rounded-lg
                 hover:bg-gray-700 transition duration-200 font-medium"
        >
          <span class="i-mdi-logout text-xl mr-3"></span>
          <span v-if="isDesktopSidebarOpen">Logout</span>
        </button>
      </div>
    </aside>

    <!-- Main Content Area -->
    <div class="flex-1 flex flex-col">
      <!-- Top Bar -->
      <header class="bg-white shadow-sm sticky top-0 z-30">
        <div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8 h-16 flex justify-between items-center">
          <!-- Mobile Menu Button -->
          <button
            @click="isMobileSidebarOpen = true"
            class="lg:hidden text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-primary rounded-md p-2"
            aria-label="Open mobile menu"
          >
            <span class="i-mdi-menu text-2xl"></span>
          </button>

          <!-- Desktop Sidebar Toggle Button -->
          <button
            @click="isDesktopSidebarOpen = !isDesktopSidebarOpen"
            class="hidden lg:block text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-primary rounded-md p-2"
            aria-label="Toggle desktop sidebar"
          >
            <span :class="[isDesktopSidebarOpen ? 'i-mdi-menu-open' : 'i-mdi-menu', 'text-2xl']"></span>
          </button>

          <h1 class="text-2xl font-bold text-gray-900">
            <slot name="header"></slot>
          </h1>

          <div class="flex items-center space-x-4">
            <span class="text-gray-700 font-medium">{{ authStore.user?.email || 'Admin User' }}</span>
            <button
              @click="authStore.logout"
              class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition duration-200 font-medium"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      <!-- Main Content Slot -->
      <main class="flex-grow p-6 lg:p-8">
        <router-view />
      </main>
    </div>
  </div>
</template>

<style>
/* Define primary color (example, should be in Tailwind config) */
.bg-primary {
  background-color: #3B82F6; /* A shade of blue, similar to Reverie's accents */
}
.hover\\:bg-primary-dark:hover {
  background-color: #2563EB; /* Darker shade for hover */
}
.text-primary {
  color: #3B82F6;
}
.focus\\:ring-primary:focus {
  --tw-ring-color: #3B82F6;
}
.focus\\:ring-primary-light:focus {
  --tw-ring-color: #60A5FA;
}
/* Ensure smooth transitions for transform properties */
.transition-transform {
  transition-property: transform;
}
</style>
`;

  await fs.writeFile(path.join(layoutsDir, 'AdminLayout.vue'), adminLayoutContent);

  // Create admin views
  const adminViewsDir = 'src/views/admin';
  await fs.ensureDir(adminViewsDir);

  // DashboardView.vue
  const dashboardContent = `<!--
* @title DashboardView
* @description Admin dashboard overview.
* @author Generated by create-totistack
* @created ${new Date().toISOString()}
-->
<template>
  <div class="container mx-auto">
    <h2 class="text-2xl font-bold text-gray-900 mb-6">Admin Dashboard</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
        <h3 class="text-lg font-medium text-gray-700 mb-2">Total Users</h3>
        <p class="text-4xl font-extrabold text-gray-900">1,024</p>
        <p class="text-sm text-gray-500 mt-2">Last 30 days</p>
      </div>
      <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
        <h3 class="text-lg font-medium text-gray-700 mb-2">Total Orders</h3>
        <p class="text-4xl font-extrabold text-gray-900">5,123</p>
        <p class="text-sm text-gray-500 mt-2">Processed successfully</p>
      </div>
      <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
        <h3 class="text-lg font-medium text-gray-700 mb-2">Revenue Generated</h3>
        <p class="text-4xl font-extrabold text-gray-900">$24,580</p>
        <p class="text-sm text-gray-500 mt-2">Year-to-date</p>
      </div>
    </div>

    <div class="mt-8 bg-white p-6 rounded-xl shadow-sm border border-gray-100">
      <h3 class="text-xl font-bold text-gray-900 mb-4">Recent Activity</h3>
      <ul class="space-y-3">
        <li class="flex items-center text-gray-700">
          <span class="i-mdi-account-plus text-primary text-xl mr-3"></span>
          New user registered: <span class="font-semibold ml-1">john.doe@example.com</span>
          <span class="text-gray-500 text-sm ml-auto">2 hours ago</span>
        </li>
        <li class="flex items-center text-gray-700">
          <span class="i-mdi-cart-plus text-primary text-xl mr-3"></span>
          New order placed: <span class="font-semibold ml-1">#1001</span>
          <span class="text-gray-500 text-sm ml-auto">5 hours ago</span>
        </li>
        <li class="flex items-center text-gray-700">
          <span class="i-mdi-cog-outline text-primary text-xl mr-3"></span>
          Settings updated by <span class="font-semibold ml-1">admin@example.com</span>
          <span class="text-gray-500 text-sm ml-auto">1 day ago</span>
        </li>
      </ul>
    </div>
  </div>
</template>`;

  await fs.writeFile(path.join(adminViewsDir, 'DashboardView.vue'), dashboardContent);

  // UsersView.vue
  const usersContent = `<!--
* @title UsersView
* @description Admin user management view.
* @author Generated by create-totistack
* @created ${new Date().toISOString()}
-->
<script setup>
import { ref } from 'vue';
// Assuming useAppStore is the main store and contains user data or a dedicated userStore is created
import { useAuthStore } from '${authStorePath}'; // Using authStore for user data if no dedicated userStore

const authStore = useAuthStore(); // Using authStore as a placeholder for user data
// In a real app, you might have a dedicated useUserStore from generateStore output
// const userStore = useUserStore();
// userStore.fetchItems(); // Assuming this method exists to fetch users

// Mock user data for demonstration
const users = ref([
  { id: '1', email: 'admin@example.com', name: 'Admin User', role: 'admin' },
  { id: '2', email: 'john.doe@example.com', name: 'John Doe', role: 'user' },
  { id: '3', email: 'jane.smith@example.com', name: 'Jane Smith', role: 'user' },
]);

const columns = [
  { key: 'email', label: 'Email' },
  { key: 'name', label: 'Name' },
  { key: 'role', label: 'Role' },
  { key: 'actions', label: 'Actions' }
];

// Placeholder for user actions
const editUser = (user) => {
  console.log('Editing user:', user);
  // Implement actual edit logic (e.g., open a modal)
};

const deleteUser = (user) => {
  console.log('Deleting user:', user);
  // Implement actual delete logic (e.g., show a confirmation dialog)
};
</script>

<template>
  <div class="container mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-bold text-gray-900">User Management</h2>
      <button class="px-5 py-2.5 bg-primary text-white rounded-lg shadow-md hover:bg-primary-dark transition duration-200">
        <span class="i-mdi-plus text-xl mr-2"></span> Add User
      </button>
    </div>

    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
      <!-- Loading state placeholder -->
      <div v-if="authStore.loading" class="text-center py-8 text-gray-600">
        <span class="i-mdi-loading i-mdi-spin text-3xl mb-2"></span>
        <p>Loading users...</p>
      </div>

      <div v-else>
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50 rounded-t-xl">
            <tr>
              <th v-for="col in columns" :key="col.key"
                class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                {{ col.label }}
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <tr v-for="user in users" :key="user.id" class="hover:bg-gray-50 transition duration-150">
              <td class="px-6 py-4 whitespace-nowrap text-gray-800">
                {{ user.email }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-800">
                {{ user.name }}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span :class="[
                  'px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full',
                  user.role === 'admin' ? 'bg-primary-light text-primary-dark' : 'bg-gray-200 text-gray-800'
                ]">
                  {{ user.role }}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button @click="editUser(user)" class="text-primary hover:text-primary-dark mr-3 transition duration-150">
                  Edit
                </button>
                <button @click="deleteUser(user)" class="text-red-600 hover:text-red-800 transition duration-150">
                  Delete
                </button>
              </td>
            </tr>
            <tr v-if="users.length === 0">
              <td :colspan="columns.length" class="px-6 py-4 text-center text-gray-500">No users found.</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>`;

  await fs.writeFile(path.join(adminViewsDir, 'UsersView.vue'), usersContent);
}
